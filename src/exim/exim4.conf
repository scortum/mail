######################################################################
#                  Runtime configuration file for Exim               #
######################################################################


# This is a default configuration file which will operate correctly in
# uncomplicated installations. Please see the manual for a complete list
# of all the runtime configuration options that can be included in a
# configuration file. There are many more than are mentioned here. The
# manual is in the file doc/spec.txt in the Exim distribution as a plain
# ASCII file. Other formats (PostScript, Texinfo, HTML, PDF) are available
# from the Exim ftp sites. The manual is also online at the Exim web sites.


# This file is divided into several parts, all but the first of which are
# headed by a line starting with the word "begin". Only those parts that
# are required need to be present. Blank lines, and lines starting with #
# are ignored.


########### IMPORTANT ########## IMPORTANT ########### IMPORTANT ###########
#                                                                          #
# Whenever you change Exim's configuration file, you *must* remember to    #
# HUP the Exim daemon, because it will not pick up the new configuration   #
# until you do. However, any other Exim processes that are started, for    #
# example, a process started by an MUA in order to send a message, will    #
# see the new configuration as soon as it is in place.                     #
#                                                                          #
# You do not need to HUP the daemon for changes in auxiliary files that    #
# are referenced from this file. They are read every time they are used.   #
#                                                                          #
# It is usually a good idea to test a new configuration for syntactic      #
# correctness before installing it (for example, by running the command    #
# "exim -C /config/file.new -bV").                                         #
#                                                                          #
########### IMPORTANT ########## IMPORTANT ########### IMPORTANT ###########



######################################################################
#                    MAIN CONFIGURATION SETTINGS                     #
######################################################################


# This Sets up the default log location to syslog, specifically to the "mail"
# Facility. Please note that you may want to change this, as other mail,
# relatively noisy mail programs also log to the mail facility (eg. courier)

# Note:
# If exim cannot log to syslog it will try to log to, /var/log/exim/exim_%s.log
log_file_path=syslog
log_selector = +smtp_connection +tls_certificate_verified


# Specify your host's canonical name here. This should normally be the fully
# qualified "official" name of your host. If this option is not set, the
# uname() function is called to obtain the name. In many cases this does
# the right thing and you need not set anything explicitly.

primary_hostname = mail.scortum.com


# The next three settings create two lists of domains and one list of hosts.
# These lists are referred to later in this configuration using the syntax
# +local_domains, +relay_to_domains, and +relay_from_hosts, respectively. They
# are all colon-separated lists:

domainlist local_domains = dsearch;/etc/exim4/virtualdomains : $primary_hostname : scortum.com : localhost
domainlist relay_to_domains =
domainlist relay_from_domains =
hostlist   relay_from_hosts = 127.0.0.1

hostlist whitelist = lsearch;/etc/exim/rblwhitelist


#hostlist dialup_host_domains = t-dialin.net : t-ipconnect.de : ipt.aol.com : arcor-ip.net : pppool.de : vie.surfer.at : adsl.hansenet.de : pool.mediaWays.net : adsl.highway.telekom.at
# -> suxx
# -> is checked by duhl.sorbs.net (list of dialuphosts managed by sorbs)


# Interface Configuration
# Ports on which exim listens for incoming connections
# "<;" simply means to change the default separator (a colon) to a
# semi colon. This is necessary for IPv6 addresses.
local_interfaces = <; ::0 ; 0.0.0.0
daemon_smtp_ports = smtp: 587 : 2401

# Most straightforward access control requirements can be obtained by
# appropriate settings of the above options. In more complicated situations, you
# may need to modify the Access Control List (ACL) which appears later in this
# file.

# The first setting specifies your local domains, for example:
#
#   domainlist local_domains = my.first.domain : my.second.domain
#
# You can use "@" to mean "the name of the local host", as in the default
# setting above. This is the name that is specified by primary_hostname,
# as specified above (or defaulted). If you do not want to do any local
# deliveries, remove the "@" from the setting above. If you want to accept mail
# addressed to your host's literal IP address, for example, mail addressed to
# "user@[192.168.23.44]", you can add "@[]" as an item in the local domains
# list. You also need to uncomment "allow_domain_literals" below. This is not
# recommended for today's Internet.

# The second setting specifies domains for which your host is an incoming relay.
# If you are not doing any relaying, you should leave the list empty. However,
# if your host is an MX backup or gateway of some kind for some domains, you
# must set relay_to_domains to match those domains. For example:
#
# domainlist relay_to_domains = *.myco.com : my.friend.org
#
# This will allow any host to relay through your host to those domains.
# See the section of the manual entitled "Control of relaying" for more
# information.

# The third setting specifies hosts that can use your host as an outgoing relay
# to any other host on the Internet. Such a setting commonly refers to a
# complete local network as well as the localhost. For example:
#
# hostlist relay_from_hosts = 127.0.0.1 : 192.168.0.0/16
#
# The "/16" is a bit mask (CIDR notation), not a number of hosts. Note that you
# have to include 127.0.0.1 if you want to allow processes on your host to send
# SMTP mail by using the loopback address. A number of MUAs use this method of
# sending mail.


# All three of these lists may contain many different kinds of item, including
# wildcarded names, regular expressions, and file lookups. See the reference
# manual for details. The lists above are used in the access control list for
# incoming messages. The name of this ACL is defined here:

acl_smtp_rcpt = acl_check_rcpt
acl_smtp_mime = acl_check_mime
acl_smtp_data = acl_check_data

# You should not change that setting until you understand how ACLs work.


# Specify the domain you want to be added to all unqualified addresses
# here. An unqualified address is one that does not contain an "@" character
# followed by a domain. For example, "caesar@rome.example" is a fully qualified
# address, but the string "caesar" (i.e. just a login name) is an unqualified
# email address. Unqualified addresses are accepted only from local callers by
# default. See the recipient_unqualified_hosts option if you want to permit
# unqualified addresses from remote sources. If this option is not set, the
# primary_hostname value is used for qualification.

qualify_domain = scortum.com


# If you want unqualified recipient addresses to be qualified with a different
# domain to unqualified sender addresses, specify the recipient domain here.
# If this option is not set, the qualify_domain value is used.

# qualify_recipient =


# The following line must be uncommented if you want Exim to recognize
# addresses of the form "user@[10.11.12.13]" that is, with a "domain literal"
# (an IP address) instead of a named domain. The RFCs still require this form,
# but it makes little sense to permit mail to be sent to specific hosts by
# their IP address in the modern Internet. This ancient format has been used
# by those seeking to abuse hosts by using them for unwanted relaying. If you
# really do want to support domain literals, uncomment the following line, and
# see also the "domain_literal" router below.

# allow_domain_literals


# No deliveries will ever be run under the uids of these users (a colon-
# separated list). An attempt to do so causes a panic error to be logged, and
# the delivery to be deferred. This is a paranoic safety catch. There is an
# even stronger safety catch in the form of the FIXED_NEVER_USERS setting
# in the configuration for building Exim. The list of users that it specifies
# is built into the binary, and cannot be changed. The option below just adds
# additional users to the list. The default for FIXED_NEVER_USERS is "root",
# but just to be absolutely sure, the default here is also "root".

# Note that the default setting means you cannot deliver mail addressed to root
# as if it were a normal user. This isn't usually a problem, as most sites have
# an alias for root that redirects such mail to a human administrator.

never_users = root


# The setting below causes Exim to do a reverse DNS lookup on all incoming
# IP calls, in order to get the true host name. If you feel this is too
# expensive, you can specify the networks for which a lookup is done, or
# remove the setting entirely.

host_lookup = *


# The settings below, which are actually the same as the defaults in the
# code, cause Exim to make RFC 1413 (ident) callbacks for all incoming SMTP
# calls. You can limit the hosts to which these calls are made, and/or change
# the timeout that is used. If you set the timeout to zero, all RFC 1413 calls
# are disabled. RFC 1413 calls are cheap and can provide useful information
# for tracing problem messages, but some hosts and firewalls have problems
# with them. This can result in a timeout instead of an immediate refused
# connection, leading to delays on starting up an SMTP session.

rfc1413_hosts = *
rfc1413_query_timeout = 3s


# By default, Exim expects all envelope addresses to be fully qualified, that
# is, they must contain both a local part and a domain. If you want to accept
# unqualified addresses (just a local part) from certain hosts, you can specify
# these hosts by setting one or both of
#
# sender_unqualified_hosts =
# recipient_unqualified_hosts =
#
# to control sender and recipient addresses, respectively. When this is done,
# unqualified addresses are qualified using the settings of qualify_domain
# and/or qualify_recipient (see above).


# If you want Exim to support the "percent hack" for certain domains,
# uncomment the following line and provide a list of domains. The "percent
# hack" is the feature by which mail addressed to x%y@z (where z is one of
# the domains listed) is locally rerouted to x@y and sent on. If z is not one
# of the "percent hack" domains, x%y is treated as an ordinary local part. This
# hack is rarely needed nowadays; you should not enable it unless you are sure
# that you really need it.
#
# percent_hack_domains =
#
# As well as setting this option you will also need to remove the test
# for local parts containing % in the ACL definition below.


# When Exim can neither deliver a message nor return it to sender, it "freezes"
# the delivery error message (aka "bounce message"). There are also other
# circumstances in which messages get frozen. They will stay on the queue for
# ever unless one of the following options is set.

# This option unfreezes frozen bounce messages after two days, tries
# once more to deliver them, and ignores any delivery failures.

ignore_bounce_errors_after = 2d

# This option cancels (removes) frozen messages that are older than a week.

timeout_frozen_after = 7d


# TLS / SSL Kram :)
#tls_advertise_hosts = *

#tls_certificate = /etc/ssl/exim/server.crt
#tls_privatekey = /etc/ssl/exim/server.key


######################################################################
#                       ACL CONFIGURATION                            #
#         Specifies access control lists for incoming SMTP mail      #
######################################################################

begin acl

# This access control list is used for every RCPT command in an incoming
# SMTP message. The tests are run in order until the address is either
# accepted or denied.

acl_check_rcpt:
  # FIXME: this is a workaround for a security vulnerability in exim 4.70 to 4.80 (fixed in 4.80.1 and later)
  # https://lists.exim.org/lurker/message/20121026.080330.74b9147b.en.html
#  warn control = dkim_disable_verify


  # Accept if the source is local SMTP (i.e. not over TCP/IP). We do this by
  # testing for an empty sending host field.

  accept  hosts = :

  #############################################################################
  # The following section of the ACL is concerned with local parts that contain
  # @ or % or ! or / or | or dots in unusual places.
  #
  # The characters other than dots are rarely found in genuine local parts, but
  # are often tried by people looking to circumvent relaying restrictions.
  # Therefore, although they are valid in local parts, these rules lock them
  # out, as a precaution.
  #
  # Empty components (two dots in a row) are not valid in RFC 2822, but Exim
  # allows them because they have been encountered. (Consider local parts
  # constructed as "firstinitial.secondinitial.familyname" when applied to
  # someone like me, who has no second initial.) However, a local part starting
  # with a dot or containing /../ can cause trouble if it is used as part of a
  # file name (e.g. for a mailing list). This is also true for local parts that
  # contain slashes. A pipe symbol can also be troublesome if the local part is
  # incorporated unthinkingly into a shell command line.
  #
  # Two different rules are used. The first one is stricter, and is applied to
  # messages that are addressed to one of the local domains handled by this
  # host. It blocks local parts that begin with a dot or contain @ % ! / or |.
  # If you have local accounts that include these characters, you will have to
  # modify this rule.

  deny    message       = Restricted characters in address
          domains       = +local_domains
          local_parts   = ^[.] : ^.*[@%!/|]

  # The second rule applies to all other domains, and is less strict. This
  # allows your own users to send outgoing messages to sites that use slashes
  # and vertical bars in their local parts. It blocks local parts that begin
  # with a dot, slash, or vertical bar, but allows these characters within the
  # local part. However, the sequence /../ is barred. The use of @ % and ! is
  # blocked, as before. The motivation here is to prevent your users (or
  # your users' viruses) from mounting certain kinds of attack on remote sites.

  deny    message       = Restricted characters in address
          domains       = !+local_domains
          local_parts   = ^[./|] : ^.*[@%!] : ^.*/\\.\\./
  #############################################################################

  # Accept mail to postmaster in any local domain, regardless of the source,
  # and without verifying the sender.

  accept  local_parts   = postmaster
          domains       = +local_domains

  # Deny unless the sender address can be verified.

  require verify        = sender

  # Accept if the message arrived over an authenticated connection, from
  # any host. Again, these messages are usually from MUAs, so recipient
  # verification is omitted.

  accept  authenticated = *
# FIXME: no-mysql
#  	  condition = ${lookup mysql{INSERT INTO whitelist (email,last) values ('${local_part}@${domain}', NOW()) \
#	                ON DUPLICATE KEY UPDATE last=NOW() }{yes}{yes}}

  # Accept Mails from halde. This is obviously not fail safe, but
  # Solaris Sendmail does not offer outgoing smtp authentication...
  accept senders = *@halde.aw12.de
         domains = egs.name
         local_parts = i
	 endpass

  #############################################################################
  # There are no checks on DNS "black" lists because the domains that contain
  # these lists are changing all the time. However, here are two examples of
  # how you could get Exim to perform a DNS black list lookup at this point.
  # The first one denies, while the second just warns.
  #
  deny    message        = rejected because $sender_host_address is in a black list at $dnslist_domain\n$dnslist_text
         !hosts          = +whitelist
	 !authenticated  = *
	 dnslists        = dul.dnsbl.sorbs.net : \
			   ix.dnsbl.manitu.net : \
			   bl.spamcop.net : \
			   sbl-xbl.spamhaus.org : \
			   list.dsbl.org : \
			   cbl.abuseat.org : \
			   sc.surbl.org : \
#			   black.uribl.com : \
	                   http.dnsbl.sorbs.net : \
			   socks.dnsbl.sorbs.net : \
			   misc.dnsbl.sorbs.net : \
			   smtp.dnsbl.sorbs.net : \
			   web.dnsbl.sorbs.net : \
			   zombie.dnsbl.sorbs.net : \
			   rhsbl.sorbs.net \
	     # Infos at http://www.au.sorbs.net/using.shtml


#	  dnslists       = sbl-xbl.spamhaus.org : dnsbl.njabl.org : bl.spamcop.net : list.dsbl.org : \
#	                   cbl.abuseat.org : relays.ordb.org : dnsbl.sorbs.net : dul.dnsbl.sorbs.net : \
#                           dialups.mail-abuse.org : sc.surbl.org : black.uribl.com

  #
  # warn    message       = X-Warning: $sender_host_address is in a black list at $dnslist_domain
  #         log_message   = found in $dnslist_domain
  #         dnslists      = black.list.example
  #############################################################################

# FIXME: no-mysql
#  warn   message        = WhiteList: true
#         senders        = ${lookup mysql{SELECT email FROM whitelist WHERE email="$sender_address"}}

# evtl noch mysql_quote: und LOWER verwenden...

#  warn   message        = WhiteList: false for mails from $sender_address
#         !senders       = ${lookup mysql{SELECT email FROM whitelist}}





  ## Check if sending host is a dialup connection
  #deny    message        = rejected because $sender_hosts_address is a dialupconnection!
  #        hosts          = +dialup_host_domains
  #        !authenticated = *
  # done by duhl.sorbs.net

  # Accept if the address is in a local domain, but only if the recipient can
  # be verified. Otherwise deny. 
  # The "endpass" line is the border between passing on to the next
  # ACL statement (if tests above it fail) or denying access (if tests
  # below it fail).

  accept  domains       = +local_domains
          endpass
          verify        = recipient

  # Accept if the address is in a domain for which we are relaying, but again,
  # only if the recipient can be verified.

  accept  domains       = +relay_to_domains
          endpass
          verify        = recipient

  # If control reaches this point, the domain is neither in +local_domains
  # nor in +relay_to_domains.

  # Accept if the message comes from one of the hosts for which we are an
  # outgoing relay. Recipient verification is omitted here, because in many
  # cases the clients are dumb MUAs that don't cope well with SMTP error
  # responses. If you are actually relaying out from MTAs, you should probably
  # add recipient verification here.

  accept  hosts         = +relay_from_hosts

  # Reaching the end of the ACL causes a "deny", but we might as well give
  # an explicit message.

  deny    message       = relay not permitted


acl_check_mime:
  # File extension filtering.
  deny
        condition = ${if match \
                        {${lc:$mime_filename}} \
                        {\N(\.bat|\.btm|\.cmd|\.com|\.cpl|\.dll|\.exe|\.lnk|\.msi|\.pif|\.prf|\.reg|\.scr|\.vbs|\.url)$\N} \
                        {1}{0}}
        message = Blacklisted file extension detected in "$mime_filename". If you legitimately need to send these files please zip them first.
        log_message = DENY: Blacklisted extension ("$mime_filename")

   # accept otherwise
   accept


acl_check_data:

  # Any hosts and authenticated clients listed here will not be scanned by SpamAssassin
     accept  hosts          = 127.0.0.1:+relay_from_hosts
     accept  authenticated  = *


# FIXME: deprecated - remove
# # First unpack MIME containers and reject serious errors.
#  # deny  message = This message contains a MIME error ($demime_reason)
#  #       demime = *
#  #    condition = ${if >{$demime_errorlevel}{2}{1}{0}}
#
#  # Reject typically wormish file extensions. There is almost no
#  # sense in sending such files by email.
#    deny    message = This message contains an unwanted file extension ($found_extension)
#             demime = scr:com:vbs:bat:lnk:pif:exe:lnk:asd:hlp:ocx:reg:chm:cmd::dll:vxd:cpl:hta:jse:shm:shb:shs:vbe:vbs:vbx:wsf:wsh



  #   # If the message contains SCR or PIF we want to Log this
  #       warn  log_message = DISCARD: ATTACHMENT ($found_extension)
  #                  demime = scr:com:vbs:bat:lnk:pif:exe
  #                 control = fakereject
  #          discard demime = scr:com:vbs:bat:lnk:pif:exe


  ## Reject virus infested messages.
  #   deny  message = This message contains malware ($malware_name)
  #          demime = *
  #         malware = *

  # Reject messages containing "viagra" in all kinds of whitespace/case combinations
  # WARNING: this is an example !
  #    deny  message = This message matches a blacklisted regular expression ($regex_match_string)
  #            regex = [Vv] *[Ii] *[Aa] *[Gg] *[Rr] *[Aa] : Prescription : Pharmacy
  #
  # Always add X-Spam-Score and X-Spam-Report headers, using SA system-wide settings
  # (user "nobody"), no matter if over threshold or not.

  #   warn message = X-Spam-Score: $spam_score ($spam_bar)
  #           spam = nobody:true
  #   warn message = X-Spam-Report: $spam_report
  #           spam = nobody:true
  #   warn message = X-New-Subject: [***SPAM***] $h_subject:
  #           spam = nobody
  #   warn message = X-Virus-Scanned: Scanned with Clam AntiVirus
  #           spam = nobody:true

  # Add X-Spam-Flag if spam is over system-wide threshold
  #   warn message = X-Spam-Flag: YES
  #           spam = nobody


  ####################################################################
  # Reject spam messages with score over 10, using an extra condition.
  # (Keep in  mind that  $spam_score_int is  the messages score
  # multiplied by ten).
  ####################################################################

  #   deny  message = This message scored $spam_score points. Congratulations!
  #         spam = nobody:true
  #         condition = ${if >{$spam_score_int}{100}{1}{0}}


  # finally accept all the rest

  accept


######################################################################
#                      ROUTERS CONFIGURATION                         #
#               Specifies how addresses are handled                  #
######################################################################
#     THE ORDER IN WHICH THE ROUTERS ARE DEFINED IS IMPORTANT!       #
# An address is passed to each router in turn until it is accepted.  #
######################################################################

begin routers

# This router routes addresses that are not in local domains by doing a DNS
# lookup on the domain name. Any domain that resolves to 0.0.0.0 or to a
# loopback interface address (127.0.0.0/8) is treated as if it had no DNS
# entry. Note that 0.0.0.0 is the same as 0.0.0.0/32, which is commonly treated
# as the local host inside the network stack. It is not 0.0.0.0/0, the default
# route. If the DNS lookup fails, no further routers are tried because of
# the no_more setting, and consequently the address is unrouteable.

dnslookup:
  driver = dnslookup
  domains = !+local_domains
  transport = remote_smtp
  ignore_target_hosts = <; ::1 ; 0.0.0.0 ; 127.0.0.0/8
  no_more

# The remaining routers handle addresses in the local domain(s).

# This router handles aliasing using a linearly searched alias file with the
# name /etc/mail/aliases. When this configuration is installed automatically,
# the name gets inserted into this file from whatever is set in Exim's
# build-time configuration. The default path is the traditional /etc/aliases.
# If you install this configuration by hand, you need to specify the correct
# path in the "data" setting below.
#
##### NB  You must ensure that the alias file exists. It used to be the case
##### NB  that every Unix had that file, because it was the Sendmail default.
##### NB  These days, there are systems that don't have it. Your aliases
##### NB  file should at least contain an alias for "postmaster".
#
# If any of your aliases expand to pipes or files, you will need to set
# up a user and a group for these deliveries to run under. You can do
# this by uncommenting the "user" option below (changing the user name
# as appropriate) and adding a "group" option if necessary. Alternatively, you
# can specify "user" on the transports that are used. Note that the transports
# listed below are the same as are used for .forward files; you might want
# to set up different ones for pipe and file deliveries from aliases.

#system_aliases:
#  driver = redirect
#  allow_fail
#  allow_defer
#  data = ${lookup{$local_part}lsearch{/etc/mail/aliases}}
## user = exim
#  file_transport = address_file
#  pipe_transport = address_pipe


# ====================
#   Adress Rewriter
# ====================
mailinglist:
  driver = redirect
  allow_fail
  allow_defer
  data = ${lookup{$local_part@$domain}lsearch*@{/etc/exim4/mailinglists.txt}}
  headers_remove = Reply-To
  headers_add = Reply-To: ${local_part}@${domain}

virtualdomain:
  driver = redirect
  allow_fail
  allow_defer
  domains = dsearch;/etc/exim4/virtualdomains
  data = ${lookup{$local_part}lsearch*@{/etc/exim4/virtualdomains/${domain}}}

localhostequiv:
  driver = redirect
  allow_fail
  allow_defer
  domains = $primary_hostname : scortum.com
  data = ${quote_local_part:$local_part}@localhost

spamlocalparts:
  driver = accept
  domains = +local_domains
  local_parts = postmaster : exim : cyrus : root
  transport = devnull

# From here on we have only local recipients (xxx@localhost)
devnull:
  driver = accept
  domains = localhost
  local_parts = devnull
  transport = devnull

# ====================
#   Local Delivery
# ====================
localNews:
  driver = accept
  domains = localhost
  caseful_local_part = true
  local_part_prefix = Scortum.
  transport = local_newsgroup

  more = no
  cannot_route_message = No Newsgroup named $local_part

# This router matches local user mailboxes. If the router fails, the error
# message is "Unknown user".
localUser:
  driver = accept
  domains = localhost
  condition = ${lookup{$local_part}lsearch{/etc/exim4/users.txt}{yes}{no}}
  transport = local_delivery
  cannot_route_message = Unknown user $local_part
  more = no
  
#localUser_forward:
#  driver = manualroute
#  domains = localhost
#  condition = ${lookup mysql{SELECT username FROM user WHERE username='${local_part}'}{yes}{no}}
#  transport = remote_smtp
#  route_list = * old.scortum.com;
#  more = no

######################################################################
#                      TRANSPORTS CONFIGURATION                      #
######################################################################
#                       ORDER DOES NOT MATTER                        #
#     Only one appropriate transport is called for each delivery.    #
######################################################################

# A transport is used only when referenced from a router that successfully
# handles an address.

begin transports

# This transport is used for delivering messages over SMTP connections.

remote_smtp:
  driver = smtp

local_delivery:
  driver = lmtp
  delivery_date_add
  envelope_to_add
  socket = "/var/imap/socket/lmtp"
  user = cyrus
  group = mail

local_newsgroup:
  driver = pipe
  delivery_date_add
  envelope_to_add
  command = "/usr/lib/cyrus/deliver -m ${local_part_prefix}${local_part} -a cyrus"
  user = cyrus
  group = mail
  return_output
  log_output
  message_prefix =
  message_suffix =

devnull:
  driver = appendfile
  file = /dev/null


# This transport is used for handling pipe deliveries generated by alias or
# .forward files. If the pipe generates any standard output, it is returned
# to the sender of the message as a delivery error. Set return_fail_output
# instead of return_output if you want this to happen only when the pipe fails
# to complete normally. You can set different transports for aliases and
# forwards if you want to - see the references to address_pipe in the routers
# section above.

address_pipe:
  driver = pipe
  return_output

# This transport is used for handling deliveries directly to files that are
# generated by aliasing or forwarding.

address_file:
  driver = appendfile
  delivery_date_add
  envelope_to_add
  return_path_add


# This transport is used for handling autoreplies generated by the filtering
# option of the virtualdomain router.

address_reply:
  driver = autoreply



######################################################################
#                      RETRY CONFIGURATION                           #
######################################################################

begin retry

# This single retry rule applies to all domains and all errors. It specifies
# retries every 15 minutes for 2 hours, then increasing retry intervals,
# starting at 1 hour and increasing each time by a factor of 1.5, up to 16
# hours, then retries every 6 hours until 4 days have passed since the first
# failed delivery.

# Address or Domain    Error       Retries
# -----------------    -----       -------

*                      *           F,2h,15m; G,16h,1h,1.5; F,4d,6h



######################################################################
#                      REWRITE CONFIGURATION                         #
######################################################################

# There are no rewriting specifications in this default configuration file.

begin rewrite



######################################################################
#                   AUTHENTICATION CONFIGURATION                     #
######################################################################

# There are no authenticator specifications in this default configuration file.

begin authenticators

sasl_login:
  driver = cyrus_sasl
  public_name = LOGIN
  server_set_id = $auth1

sasl_plain:
  driver = cyrus_sasl
  public_name = PLAIN
  server_set_id = $auth2

# cram md5 does not work with saslauthd
#sasl_cram_md5:
#  driver = cyrus_sasl
#  public_name = CRAM-MD5
#  server_set_id = $auth1

######################################################################
#                   CONFIGURATION FOR local_scan()                   #
######################################################################

# If you have built Exim to include a local_scan() function that contains
# tables for private options, you can define those options here. Remember to
# uncomment the "begin" line. It is commented by default because it provokes
# an error with Exim binaries that are not built with LOCAL_SCAN_HAS_OPTIONS
# set in the Local/Makefile.

# begin local_scan


# End of Exim configuration file
